.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MYCOPY 1"
.TH MYCOPY 1 "2015-06-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
mycopy.pl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
mycopy.pl \-\-help
.PP
mycopy.pl \-\-warn
.PP
mycopy.pl \-\-debug \-\-debug \-\-debug
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBmycopy.pl\fR script copies files and directories from one place to another.
It relies heavily on the date and time stamp of files. It only copies them, if
the source files are newer or don't exist at the destination. It was written
for the need to copy \f(CW\*(C`JPG\*(C'\fR\-files from a SDHC-card to the home directory. Also
it should copy them to another SD-card. The card itself now knows what data it
contains. It has a configuration file, which tells the program what to copy.  A
main configuration file tells the script where it has to look for those
configuration files. Under Ubuntu 10.04 USB-sticks and the like are mounted to
\&\fI/media/\fR, so all you have to tell the script in the main configuration file,
that it should look under \fI/media/*\fR and, for example, my home directory
\&\fI/home/ljedamus\fR. Symlinks to files are \fB\s-1NOT\s0\fR copied (they can be broken, so
they are ignored).
.ie n .SS "global configuration file ""mycopy.conf"""
.el .SS "global configuration file \f(CWmycopy.conf\fP"
.IX Subsection "global configuration file mycopy.conf"
# source or destination
.PP
/home/ljedamus
.PP
/home/ljedamus/Dropbox
.PP
/media/*
.PP
/mnt/nas/*
.PP
Here you put the main source or destination directories, which have a
\&\fI.mycopy.conf\fR and a \fI.is_mounted\fR. These two files are needed to tell the
program, that for example the USB-stick is mounted and wants to be treated as a
source or destination target.
.ie n .SS "configuration file ""~/.mycopy.conf"""
.el .SS "configuration file \f(CW~/.mycopy.conf\fP"
.IX Subsection "configuration file ~/.mycopy.conf"
# Target:Source:Destination:Rekursive:Use_Stamp:Subdir:File(s)
.PP
canon_dc_jpg:y:y:n:n:Bilder/Fotos/CANON_DC:*.JPG
.PP
bin:y:y:y:n:bin:*.sh *.pl *.po *.mo
.PP
Here the first word is the target, the second if used as a source (y/n), the
third if used as a destination (y/n). The fourth word marks working recursively
(y/n).
.PP
The next word is useful, if you want to use a stamp-file, so that only files,
which are newer than the destination stamp are copied. It can be (y/n).
.PP
The sixth word is the sub directory (from the dir, which has the
\&\fI.mycopy.conf\fR and the \fI.is_mounted\fR).
.PP
The last word lists the file(s), which should be copied (and only them). Most
of the time it is \f(CW\*(C`*\*(C'\fR.
.ie n .SS "corresponding configuration file ""/media/CANON_DC/.mycopy.conf"""
.el .SS "corresponding configuration file \f(CW/media/CANON_DC/.mycopy.conf\fP"
.IX Subsection "corresponding configuration file /media/CANON_DC/.mycopy.conf"
# Target:Source:Destination:Rekursive:Use_Stamp:Subdir:File(s)
.PP
canon_dc_jpg:y:n:n:n:DCIM/100CANON:*
.PP
Here the two configuration files have the same target \f(CW\*(C`canon_dc_jpg\*(C'\fR. Also the
last file says, it is source, but not destination.
