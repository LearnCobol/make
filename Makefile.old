# erzeugt Samstag, 04. Juli 2015 14:04 (C) 2015 von Leander Jedamus
# modifiziert Mittwoch, 08. Juli 2015 15:20 von Leander Jedamus
# modifiziert Samstag, 04. Juli 2015 14:11 von Leander Jedamus

SUFFIXES	:= .out .a .o .c .cc .C .y .l .s .S .h .dvi .tex .latex .ps .w .ch .sh .noweb .mf .ind .sgml .f .cob
.SUFFIXES	:= .out .a .o .c .cc .C .y .l .s .S .h .dvi .tex .latex .ps .w .ch .sh .noweb .mf .ind .sgml .f .cob

CC		= gcc # cc
CXX		= g++

FORTRANC        = mpifort

COBOLC          = cobc
#COBCWARN	= -W
COBCWARN	=
#COBCFREE	= -free
COBCFREE	=

LEX		= flex
YACC		= bison

POD2MAN		= pod2man
GROFF		= groff
RST2MAN		= rst2man.py
RST2LATEX	= rst2latex.py
RST2ODT		= rst2odt.py
RST2HTML	= rst2html.py

DEBUGGER	= gdb
TEX		= tex
LATEX		= latex
MAKEINDEX	= makeindex
DVIPS		= dvips
GS		= gs
CWEAVE		= cweave
CTANGLE		= ctangle
NOWEAVE		= noweave
NOTANGLE	= notangle
GNUPLOT		= gnuplot
MF		= mf
GFTOPK		= gftopk
SED		= sed

RM		= rm -f
GENERATE	= ./generate2
PRINT		= print
COPTS		= $(DFLAGS) $(CPPFLAGS) $(IFLAGS) $(TARGET_ARCH)
LOPTS		= $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
C.c		= $(CC) $(strip $(CFLAGS) $(COPTS))
C.cc		= $(CXX) $(strip $(CXXFLAGS) $(COPTS))
COMPILE.c	= $(C.c) -c
COMPILE.f	= $(FORTRANC)
COMPILE.cob	= $(COBOLC)
COMPILE.cc	= $(C.cc) -c
LINK.c		= $(CC) $(strip $(CFLAGS) $(LOPTS))
LINK.cc		= $(CXX) $(strip $(CXXFLAGS) $(LOPTS))
DEPEND.c	= $(C.c) -MM
DEPEND.cc	= $(C.cc) -MM

NOWEAVE.latex	= $(NOWEAVE) -latex
MAKEINDEX.idx	= $(MAKEINDEX) $(MAKEINDEXFLAGS)
MAKEINDEXFLAGS	= -s makeindex.ist -g -lA
PAPER		= a4
RES		= 600
SEDCMD		= noweb2latex.sed

CFLAGS		= #
CPPFLAGS	= -Wall -g
CPPFLAGS	+= # -O2
CPPFLAGS	+= # -ansi
CPPFLAGS	+= # -traditional
CPPFLAGS	+= # -funroll-loops -fomit-frame-pointer
CXXFLAGS	= # -felide-constructors -fmemoize-lookups
DFLAGS		= -DINLINE=inline
DFLAGS		+= -DCONST=const
LDFLAGS		= # -s
LDLIBS		= -lm
# LDLIBS		+= -lefence
LDLIBS		+= # -lvga
LDLIBS		+= # -ly
LDLIBS		+= # -ltermcap
LDLIBS		+= -ll # lex
LDLIBS		+= -ly # yacc
CLEAN		=

LEXFILE		= lex.yy.c

define compile.c
$(RM) $@
$(COMPILE.c) $< $(OUTPUT_OPTION)
endef

define compile.f
$(RM) $@
$(COMPILE.f) -c $< -o $@
endef

define compile.cob
$(RM) $@
$(COMPILE.cob) $(COBCFREE) $(COBCWARN) -c $< -o $@
endef

define compile.cc
$(RM) $@
$(COMPILE.cc) $< $(OUTPUT_OPTION)
endef

define link.c
$(RM) $@
$(LINK.c) $^ $(LOADLIBES) -o $@ $(LDLIBS)
endef

define link.cc
$(RM) $@
$(LINK.cc) $^ $(LOADLIBES) -o $@ $(LDLIBS)
endef

define lex.l
@$(RM) $@
$(LEX) $<
mv $(LEXFILE) $@
endef

define yacc.y
@$(RM) $@
$(YACC) -d $<
endef

define pod2man.pl
@$(RM) $@
$(POD2MAN) $< > $@
endef

define man2ps.1
@$(RM) $@
$(GROFF) -T ps -man $< > $@
endef

define rst2man.txt
@$(RM) $@
$(RST2MAN) $< > $@
endef

define rst2html.txt
@$(RM) $@
$(RST2HTML) $< > $@
endef

define rst2latex.txt
@$(RM) $@
$(RST2LATEX) $< > $@
endef

define rst2odt.txt
@$(RM) $@
$(RST2ODT) $< > $@
endef

define rst2man.txt
@$(RM) $@
$(RST2MAN) $< > $@
endef

define debug
$(DEBUGGER)
endef

define ctangle
$(RM) $@
$(CTANGLE) $<
endef

define cweave
$(RM) $@
$(CWEAVE) $<
endef

define notangle
$(RM) $@
$(NOTANGLE) -R$@ $< > $@
endef

define noweave
$(RM) $@
$(NOWEAVE) $< > $@
endef

define tex
$(RM) $@
$(TEX) $<
endef

define latex
$(RM) $@
$(LATEX) $<
endef

define dvips
$(RM) $@
$(DVIPS) -t $(PAPER) $< -o $@
endef

define gnuplot
$(RM) $@
@echo set terminal mf > gnuplot.do
@echo set output '"'$@'"' >> gnuplot.do
@cat $< >> gnuplot.do
@echo cp $< gnuplot.do
$(GNUPLOT) < gnuplot.do
$(RM) gnuplot.do
endef

define mf
$(RM) $@
$(MF) '\mode=localfont; \mag=1; input $<'
endef

define gftopk
$(RM) $@
$(GFTOPK) $<
endef

define sed
$(RM) $@
$(SED) -f $(SEDCMD) > sed.tmp
mv sed.tmp $@
endef

define makeindex
$(MAKEINDEX) $(MAKEINDEXFLAGS) $<
endef

define generate
$(GENERATE) $<
endef

define print
$(PRINT) $<
endef

%.c:		%.f
		$(lex.l)

%.tab.c:	%.y
		$(yacc.y)

%.1:		%.pl
		$(pod2man.pl)

%.ps:		%.1
		$(man2ps.1)

%.1:		%.txt
		$(rst2man.txt)

%.tex:		%.txt
		$(rst2latex.txt)

%.html:		%.txt
		$(rst2html.txt)

%.odt:		%.txt
		$(rst2odt.txt)

%.1:		%.txt
		$(rst2man.txt)

%.o:		%.c
		$(compile.c)

%.o:		%.f
		$(compile.f)

%.o:		%.cob
		$(compile.cob)

%.o:		%.cc
		$(compile.cc)

%.c:		%.l
		$(lex.l)

%.tab.c:	%.y
		$(yacc.y)

%.cc:		%.txt
		$(generate)

%.hh:		%.txt
		$(generate)

%.c:		%.w
		$(ctangle)

%.tex:		%.w
		$(cweave)

%.c:		%.noweb
		$(notangle)

%.h:		%.noweb
		$(notangle)

%.cc:		%.noweb
		$(notangle)

%.tex:		%.noweb
		$(noweave)

%.mf:		%.doplot
		$(gnuplot)

%.$(RES)gf:	%.mf
		$(mf)

%.$(RES)pk:	%.$(RES)gf
		$(gftopk)

%.idx:		%.tex
		$(latex)
		$(latex)

%.ind:		%.idx
		$(makeindex)

OBJS		= #
FILES		= Makefile
FFILES          = helper.f dachflaeche.f
COBFILES	= helloworld.cob
LEXFILES	= yylval.l
YACCFILES	= grammar.y
YACCCFILES	= $(YACCFILES:%.y=%.tab.c)
YACCHFILES	= $(YACCCFILES:%.c=%.h)
FOBJS		= $(FFILES:%.f=%.o)
OBJS		+= $(FOBJS)
COBOBJS		= $(COBFILES:%.cob=%.o)
OBJS		+= $(COBOBJS)
LEXOBJS		= $(LEXFILES:%.l=%.o)
OBJS		+= $(LEXOBJS)
YACCOBJS	= $(YACCCFILES:%.c=%.o)
OBJS		+= $(YACCOBJS)
PROGRAM1	= dachflaeche
PROGRAM2	= calc
PROGRAM3	= helloworld
PROGRAMS	= $(PROGRAM1) $(PROGRAM2) $(PROGRAM3)
CLEAN		+= $(OBJS) $(PROGRAMS)
CLEAN		+= mycopy.1 mycopy.ps

.PHONY:		all
all::		$(PROGRAMS)
		@echo done.

doc:		mycopy.ps
		@echo done.

dachflaeche:	$(FOBJS)
		$(FORTRANC) $(FOBJS) -o $@

helloworld:	$(COBOBJS)
		$(COBOLC) -x $(COBFILES) -o $@

calc:		$(YACCOBJS) $(LEXOBJS)
		$(link.c)

.PHONY:		clean
clean:
		$(RM) $(CLEAN)

print:		$(FILES)
		$(PRINT) $?
		touch print

.PHONY:		dummy
dummy:

dachflaeche.f:	helper.o
yylval.l:	grammar.tab.o

#
# include a dependency file if one exists
#
ifeq (.depend,$(wildcard .depend))
include .depend
endif

# vim:ai sw=2

